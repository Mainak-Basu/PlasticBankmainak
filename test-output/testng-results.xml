<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="16" passed="14" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-09-05T11:48:47 IST" name="Default suite" finished-at="2023-09-05T12:23:04 IST" duration-ms="2056994">
    <groups>
    </groups>
    <test started-at="2023-09-05T11:48:47 IST" name="Default test" finished-at="2023-09-05T12:23:04 IST" duration-ms="2056994">
      <class name="smoke_Suite.ALC_4357">
        <test-method is-config="true" signature="dataCreation()[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T11:46:37 IST" name="dataCreation" finished-at="2023-09-05T11:48:47 IST" duration-ms="130010" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- dataCreation -->
        <test-method is-config="true" signature="generateBranchMemberName()[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T11:48:47 IST" name="generateBranchMemberName" finished-at="2023-09-05T11:48:47 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateBranchMemberName -->
        <test-method is-config="true" signature="generateBranchName()[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T11:48:47 IST" name="generateBranchName" finished-at="2023-09-05T11:48:47 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateBranchName -->
        <test-method is-config="true" signature="generateRandomLastName()[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T11:48:47 IST" name="generateRandomLastName" finished-at="2023-09-05T11:48:47 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateRandomLastName -->
        <test-method is-config="true" signature="generateRandomBranchMemberNumber()[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T11:48:47 IST" name="generateRandomBranchMemberNumber" finished-at="2023-09-05T11:48:47 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateRandomBranchMemberNumber -->
        <test-method is-config="true" signature="generateRandomNumber()[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T11:48:47 IST" name="generateRandomNumber" finished-at="2023-09-05T11:48:47 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateRandomNumber -->
        <test-method is-config="true" signature="setup()[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T11:48:47 IST" name="setup" finished-at="2023-09-05T11:49:12 IST" duration-ms="24496" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="member_Branch1_Transaction_KG_Bonus_App_Assertion()[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T11:49:12 IST" name="member_Branch1_Transaction_KG_Bonus_App_Assertion" description="Verify that the correct KG and bonus values are showing in before transaction completion screen in mobile app also verify  the correct KG, bonus and amount value in Confirm Exchange Page. Also verified in Branch 1 that there is no bonus recorded under Exchange " finished-at="2023-09-05T11:50:26 IST" duration-ms="74030" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- member_Branch1_Transaction_KG_Bonus_App_Assertion -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T11:50:26 IST" name="afterMethod" finished-at="2023-09-05T11:50:26 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=member_Branch1_Transaction_KG_Bonus_App_Assertion status=SUCCESS method=ALC_4357.member_Branch1_Transaction_KG_Bonus_App_Assertion()[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="member_Branch1_Transaction_KG_Bonus_Alchmey_Assertion()[pri:1, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T11:50:26 IST" name="member_Branch1_Transaction_KG_Bonus_Alchmey_Assertion" description="1.Check Branch Details if KG Recycled, Members Registered and Active members count are correct. 2. In branch 1 exchange history, check, Member photo, material name, material amount, money amount , total and bonus amount and associated bonus name. 3.Check in Bonus search Area, KG promised KG delivered, and pending KG.. 4.Check HDPE and PET KG count in Bonus Summary. Also check bonus progress values... 5. Check if the start bonus is there for the first branch in  Bonus Approval and Assert Total Bonus/Needing Approval" finished-at="2023-09-05T11:56:37 IST" duration-ms="371385" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- member_Branch1_Transaction_KG_Bonus_Alchmey_Assertion -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T11:56:37 IST" name="afterMethod" finished-at="2023-09-05T11:56:37 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=member_Branch1_Transaction_KG_Bonus_Alchmey_Assertion status=SUCCESS method=ALC_4357.member_Branch1_Transaction_KG_Bonus_Alchmey_Assertion()[pri:1, instance:smoke_Suite.ALC_4357@69ee81fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="Branch1_Branch2_Transaction_App_Assertions()[pri:2, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T11:56:37 IST" name="Branch1_Branch2_Transaction_App_Assertions" description="Do Transaction between Branch 1 and Branch 2 and Verify Bonus and Kg Transferred" finished-at="2023-09-05T11:57:46 IST" duration-ms="68313" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Branch1_Branch2_Transaction_App_Assertions -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T11:57:46 IST" name="afterMethod" finished-at="2023-09-05T11:57:46 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Branch1_Branch2_Transaction_App_Assertions status=SUCCESS method=ALC_4357.Branch1_Branch2_Transaction_App_Assertions()[pri:2, instance:smoke_Suite.ALC_4357@69ee81fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="Branch1_Branch3_Transaction()[pri:3, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T11:57:46 IST" name="Branch1_Branch3_Transaction" description="Do Transaction between Branch 1 and Branch 3 and Verify Bonus and Kg Transferred" finished-at="2023-09-05T11:58:55 IST" duration-ms="69161" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Branch1_Branch3_Transaction -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T11:58:55 IST" name="afterMethod" finished-at="2023-09-05T11:58:55 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Branch1_Branch3_Transaction status=SUCCESS method=ALC_4357.Branch1_Branch3_Transaction()[pri:3, instance:smoke_Suite.ALC_4357@69ee81fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="Branch2_Processor_Transaction()[pri:4, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T11:58:55 IST" name="Branch2_Processor_Transaction" description="Do Transaction between Branch 2 and Processor and Verify Bonus and Kg Transferred" finished-at="2023-09-05T12:00:09 IST" duration-ms="74194" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Branch2_Processor_Transaction -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:00:09 IST" name="afterMethod" finished-at="2023-09-05T12:00:09 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Branch2_Processor_Transaction status=SUCCESS method=ALC_4357.Branch2_Processor_Transaction()[pri:4, instance:smoke_Suite.ALC_4357@69ee81fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="Branch3_Processor_Transaction()[pri:5, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:00:09 IST" name="Branch3_Processor_Transaction" description="Do Transaction between Branch 3 and Processor and Verify Bonus and Kg Transferred" finished-at="2023-09-05T12:01:24 IST" duration-ms="75321" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Branch3_Processor_Transaction -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:01:24 IST" name="afterMethod" finished-at="2023-09-05T12:01:24 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Branch3_Processor_Transaction status=SUCCESS method=ALC_4357.Branch3_Processor_Transaction()[pri:5, instance:smoke_Suite.ALC_4357@69ee81fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="Verify_Bonus_Branch1()[pri:6, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:01:24 IST" name="Verify_Bonus_Branch1" description="Assert Branch Tags Values in Summary in Branch1.Check approve transaction from Branch 1. Toggle all required and Approve 1 and validate all gets approved." finished-at="2023-09-05T12:03:47 IST" duration-ms="142449" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Bonus_Branch1 -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:03:47 IST" name="afterMethod" finished-at="2023-09-05T12:03:47 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Bonus_Branch1 status=SUCCESS method=ALC_4357.Verify_Bonus_Branch1()[pri:6, instance:smoke_Suite.ALC_4357@69ee81fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="Verify_Bonus_Branch2()[pri:7, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:03:47 IST" name="Verify_Bonus_Branch2" description="Assert Branch Tags Values in Summary in Branch2 .Check approve transaction from Branch 2. Toggle all required and Approve and validate all gets approved." finished-at="2023-09-05T12:05:43 IST" duration-ms="116277" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Bonus_Branch2 -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:05:43 IST" name="afterMethod" finished-at="2023-09-05T12:05:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Bonus_Branch2 status=SUCCESS method=ALC_4357.Verify_Bonus_Branch2()[pri:7, instance:smoke_Suite.ALC_4357@69ee81fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="Verify_Bonus_Branch3()[pri:8, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:05:43 IST" name="Verify_Bonus_Branch3" description="Assert Branch Tags Values in Summary in Branch3.Check approve transaction from Branch 3. Toggle all required and Approve and validate all gets approved." finished-at="2023-09-05T12:07:34 IST" duration-ms="111179" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Bonus_Branch3 -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:07:34 IST" name="afterMethod" finished-at="2023-09-05T12:07:34 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Bonus_Branch3 status=SUCCESS method=ALC_4357.Verify_Bonus_Branch3()[pri:8, instance:smoke_Suite.ALC_4357@69ee81fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="Verify_Bonus_Processor()[pri:9, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:07:34 IST" name="Verify_Bonus_Processor" description="Verify details of transaction from Processor and validate all gets approved in processor Exchange History." finished-at="2023-09-05T12:09:07 IST" duration-ms="93106" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Verify_Bonus_Processor -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:09:07 IST" name="afterMethod" finished-at="2023-09-05T12:09:07 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Verify_Bonus_Processor status=SUCCESS method=ALC_4357.Verify_Bonus_Processor()[pri:9, instance:smoke_Suite.ALC_4357@69ee81fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="Plastic_Chain_Before_Approval()[pri:10, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:09:07 IST" name="Plastic_Chain_Before_Approval" description="Check for plastic chain in the Bonus Order.Verify if it is all in Orange Color as they are pending. Also check Chain is in correct Order" finished-at="2023-09-05T12:10:53 IST" duration-ms="105533" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Plastic_Chain_Before_Approval -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:10:53 IST" name="afterMethod" finished-at="2023-09-05T12:10:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Plastic_Chain_Before_Approval status=SUCCESS method=ALC_4357.Plastic_Chain_Before_Approval()[pri:10, instance:smoke_Suite.ALC_4357@69ee81fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="VerifyBonusOrderRecieptBranchAssertions()[pri:11, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:10:53 IST" name="VerifyBonusOrderRecieptBranchAssertions" description="In Bonus Approval Check for receipts, qty bonus values from Audit trail. Also Verigy Total Weight/ Bonus in Bonus Approval Page" finished-at="2023-09-05T12:14:13 IST" duration-ms="199856" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyBonusOrderRecieptBranchAssertions -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:14:13 IST" name="afterMethod" finished-at="2023-09-05T12:14:13 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyBonusOrderRecieptBranchAssertions status=SUCCESS method=ALC_4357.VerifyBonusOrderRecieptBranchAssertions()[pri:11, instance:smoke_Suite.ALC_4357@69ee81fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="VerifyBonusOrderBranchValueAssertions()[pri:12, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:14:13 IST" name="VerifyBonusOrderBranchValueAssertions" description="This method redirects to Bonus Approval and Assert 1.&#039;Total Bonus&#039;/&#039;Needing Approval&#039; 2. Assert &#039;Audit Trail&#039; under which it will Assert all the values in &#039;Buy/Sell Transactions&#039; of all the Branches and Processor" finished-at="2023-09-05T12:15:24 IST" duration-ms="70862" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- VerifyBonusOrderBranchValueAssertions -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:15:24 IST" name="afterMethod" finished-at="2023-09-05T12:15:24 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=VerifyBonusOrderBranchValueAssertions status=SUCCESS method=ALC_4357.VerifyBonusOrderBranchValueAssertions()[pri:12, instance:smoke_Suite.ALC_4357@69ee81fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="BonusTransferedCheck()[pri:13, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:15:24 IST" name="BonusTransferedCheck" description="Check for transferred label in All the Branch exchange history." finished-at="2023-09-05T12:21:38 IST" duration-ms="374300" status="FAIL">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//span[text()='(transferred)']"}
  (Session info: chrome=116.0.5845.141)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.12.0', revision: '249f2a7d1b*'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '19.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [411fdc1424b3675c34b97e7eb3d8ca5a, findElement {using=xpath, value=//span[text()='(transferred)']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 116.0.5845.141, chrome: {chromedriverVersion: 116.0.5845.96 (1a3918166880..., userDataDir: C:\Users\Fleek\AppData\Loca...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:62999}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:62999/devtoo..., se:cdpVersion: 116.0.5845.141, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 411fdc1424b3675c34b97e7eb3d8ca5a]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//span[text()='(transferred)']"}
  (Session info: chrome=116.0.5845.141)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.12.0', revision: '249f2a7d1b*'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '19.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [411fdc1424b3675c34b97e7eb3d8ca5a, findElement {using=xpath, value=//span[text()='(transferred)']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 116.0.5845.141, chrome: {chromedriverVersion: 116.0.5845.96 (1a3918166880..., userDataDir: C:\Users\Fleek\AppData\Loca...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:62999}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:62999/devtoo..., se:cdpVersion: 116.0.5845.141, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 411fdc1424b3675c34b97e7eb3d8ca5a
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:67)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:484)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy54.isDisplayed(Unknown Source)
at alchemy_Pages.Branches.verifyBonusTransfered(Branches.java:515)
at smoke_Suite.ALC_4357.BonusTransferedCheck(ALC_4357.java:178)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BonusTransferedCheck -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:21:38 IST" name="afterMethod" finished-at="2023-09-05T12:21:38 IST" duration-ms="373" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=BonusTransferedCheck status=FAILURE method=ALC_4357.BonusTransferedCheck()[pri:13, instance:smoke_Suite.ALC_4357@69ee81fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="Plastic_Chain_After_Approval()[pri:14, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:21:38 IST" name="Plastic_Chain_After_Approval" description="Verified Check chain turned to green and is in order." finished-at="2023-09-05T12:22:39 IST" duration-ms="60010" status="FAIL">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[no such element: Unable to locate element: {"method":"xpath","selector":"//input[@id='phone']"}
  (Session info: chrome=116.0.5845.141)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.12.0', revision: '249f2a7d1b*'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '19.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [411fdc1424b3675c34b97e7eb3d8ca5a, findElement {using=xpath, value=//input[@id='phone']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 116.0.5845.141, chrome: {chromedriverVersion: 116.0.5845.96 (1a3918166880..., userDataDir: C:\Users\Fleek\AppData\Loca...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:62999}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:62999/devtoo..., se:cdpVersion: 116.0.5845.141, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 411fdc1424b3675c34b97e7eb3d8ca5a]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: no such element: Unable to locate element: {"method":"xpath","selector":"//input[@id='phone']"}
  (Session info: chrome=116.0.5845.141)
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.12.0', revision: '249f2a7d1b*'
System info: os.name: 'Windows 11', os.arch: 'amd64', os.version: '10.0', java.version: '19.0.1'
Driver info: org.openqa.selenium.chrome.ChromeDriver
Command: [411fdc1424b3675c34b97e7eb3d8ca5a, findElement {using=xpath, value=//input[@id='phone']}]
Capabilities {acceptInsecureCerts: false, browserName: chrome, browserVersion: 116.0.5845.141, chrome: {chromedriverVersion: 116.0.5845.96 (1a3918166880..., userDataDir: C:\Users\Fleek\AppData\Loca...}, fedcm:accounts: true, goog:chromeOptions: {debuggerAddress: localhost:62999}, networkConnectionEnabled: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://localhost:62999/devtoo..., se:cdpVersion: 116.0.5845.141, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify, webauthn:extension:credBlob: true, webauthn:extension:largeBlob: true, webauthn:extension:minPinLength: true, webauthn:extension:prf: true, webauthn:virtualAuthenticators: true}
Session ID: 411fdc1424b3675c34b97e7eb3d8ca5a
at java.base/jdk.internal.reflect.DirectConstructorHandleAccessor.newInstance(DirectConstructorHandleAccessor.java:67)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:500)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:484)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy54.sendKeys(Unknown Source)
at alchemy_Pages.AlchemyLoginPage.enterDetails(AlchemyLoginPage.java:53)
at alchemy_Pages.AlchemyLoginPage.alc_adminlogin(AlchemyLoginPage.java:69)
at smoke_Suite.ALC_4357.Plastic_Chain_After_Approval(ALC_4357.java:186)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)
at java.base/java.lang.reflect.Method.invoke(Method.java:578)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Plastic_Chain_After_Approval -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:22:39 IST" name="afterMethod" finished-at="2023-09-05T12:22:39 IST" duration-ms="392" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=Plastic_Chain_After_Approval status=FAILURE method=ALC_4357.Plastic_Chain_After_Approval()[pri:14, instance:smoke_Suite.ALC_4357@69ee81fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method signature="checkMemberBonusTransfered()[pri:15, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:22:39 IST" name="checkMemberBonusTransfered" description="Check member bonus amount is accurate in Plastic Bank App." finished-at="2023-09-05T12:23:03 IST" duration-ms="24239" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkMemberBonusTransfered -->
        <test-method is-config="true" signature="afterMethod(org.testng.ITestResult)[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:23:03 IST" name="afterMethod" finished-at="2023-09-05T12:23:03 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=checkMemberBonusTransfered status=SUCCESS method=ALC_4357.checkMemberBonusTransfered()[pri:15, instance:smoke_Suite.ALC_4357@69ee81fc] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:smoke_Suite.ALC_4357@69ee81fc]" started-at="2023-09-05T12:23:03 IST" name="teardown" finished-at="2023-09-05T12:23:04 IST" duration-ms="1132" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
      </class> <!-- smoke_Suite.ALC_4357 -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
